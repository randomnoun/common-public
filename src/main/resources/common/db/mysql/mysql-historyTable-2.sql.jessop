<%@ jessop language="javascript" suppressEol="true" %> 
<%
    // inputs to this thing
    // logger - a logger
    // schema - a SchemaTO
    // options.tableNames - a List of tables names to process (null = all)
    // options.undoEnabledTableNames - a List of table names that are undo-enabled (null = none)
    // options.revisionedTableNames - a List of table names that store revisions and comments
    // options.existingDataUserActionId - userActionId for existing data
    // options.dropTables - drop history tables
    // options.alwaysRecreateTriggers
    // options.alwaysRecreateStoredProcedures
    // options.includeUpdateBitFields
    // options.includeCurrentUser
    // options.grantUsername - (String) grant execute permissions to this user on stored procedures
    
    // 'undoable' tables must have 
    // a PK column called 'lngId'
    // and a 'lngUserActionId' column
    // and a 'ynDeleted' column
    // to be able to undo deletes by userActionId, code must set 
    //   lngUserActionId=the userActionId and 
    //   ynDeleted='Y' 
    // before deleting the record
    
    // outputs
    // SQL to generate history tables, triggers to update them, stored procedures to undo things
    
    
    // utility functions
    
    // $.each() - jQuery-style iterator function
    $ = {
        each : function(array, callback) {  // callback = function(indexInArray, value);
            if (array.length) {
                for (var i=0; i<array.length; i++) { callback(i, array[i]); }     // javascript array
            } else { 
                for (var i=0; i<array.size(); i++) { callback(i, array.get(i)); } // java list
            } 
        }
    };
  
    /** Return the SQL to represent the data type in the supplied TableColumnTO
    * 
    * @param com.randomnoun.common.db.to.TableColumnTO c
    */
    function getDatatypeAndLength(c) {
        var result = c.getDataType(); 
        if (c.getDataType() == 'enum') {
         result += c.getColumnType().substring(4); // "enum('value1','value2','value3')"

	     } else if (c.getDataType() == 'set') {
    	     result += c.getColumnType().substring(3); // "set('value1','value2','value3')"

	     } else if ((c.getDataType() == 'varchar' ||
            c.getDataType() == 'char' ||
            c.getDataType() == 'binary' ||
            c.getDataType() == 'varbinary')) 
        { 
            result += '(' + c.getDataTypeLength() + ')';
        } 
        return result;
    }
  
    var schemaName = schema.getName();
    var tableNames = options.tableNames ? options.tableNames : schema.getTableNames();
    
    $.each(tableNames, function(i, tableName) {
        logger.info('tableName: ' + tableName);
    });

    // -----------------------------------------------------
    // main loop over all tableNames
    // -----------------------------------------------------

    $.each(tableNames, function(i, tableName) {
        var lowerTableName = tableName.toLowerCase();
        if (lowerTableName.endsWith("history") || 
            lowerTableName.startsWith("qry")) // derived from other tables
        {
            return;
        }
    
        var t = schema.getTable(tableName);
        var ht = null;
        if (schema.getTableNames().contains(tableName + 'History')) { 
            ht = schema.getTable(tableName + 'History');
        }
        var isUndoEnabled = options.undoEnabledTableNames ? options.undoEnabledTableNames.contains(tableName) : false;
        var isRevisioned = options.revisionedTableNames ? options.revisionedTableNames.contains(tableName) : false;
        var tableNameSansPrefix = tableName.replace(/^tbl/, '');

        
        // -----------------------------------------------------
        // check if history tables are up-to-date and determine which SQL statements to generate
        // -----------------------------------------------------
        
        var altered = false;  // columns added since history table last generated
        var alteredDel = '';  // columns deleted since history table last generated
        var updColumnRegex = /^upd/;
        if (ht == null) {
            altered = true;
        } else {
            $.each(t.getTableColumns(), function(j, tc) {
                if (!ht.getTableColumnNames().contains(tc.getName())) { altered = true; }
            });
            $.each(ht.getTableColumnNames(), function(j, hc) {
                if (!(t.getTableColumnNames().contains(hc) ||
                    hc=='lngTriggerId' || 
                    hc=='txtTriggerAction' ||
                    hc=='dtmTriggerTime' ||
                    /^upd/.test(hc))) 
                {
                    alteredDel += '-- deleted column ' + hc + '\n';
                }
            });
        }
        var createTable = (options.dropTables || ht == null);
        var alterTable = (altered && !createTable);
        var createTrigger = (options.alwaysRecreateTriggers || options.dropTables || altered || alteredDel);
        var createStoredProcedure = (options.alwaysRecreateStoredProcedures || options.dropTables || altered || alteredDel);
        
        

        // -----------------------------------------------------
        // drop triggers
        // -----------------------------------------------------
          
        if (createTrigger) {
%>
-- Updating history tables for <%= tableName + (isUndoEnabled ? ' (undo enabled)' : '') %>
DROP TRIGGER IF EXISTS `trg<%= tableName %>Insert`;
DROP TRIGGER IF EXISTS `trg<%= tableName %>Update`;
DROP TRIGGER IF EXISTS `trg<%= tableName %>Delete`;
<%
        }

        // -----------------------------------------------------
        // drop tables
        // -----------------------------------------------------

        if (options.dropTables) {
%>
DROP TABLE IF EXISTS `<%= tableName %>History`;
<%
            ht = null;
        }

        // -----------------------------------------------------
        // construct arrays of column names for use in generated SQL
        // -----------------------------------------------------

        var icolNames1=[];              // txtTriggerUser, a, b, c, ...
        var icolNames2=[];              // USER(), a, b, c, ... ( options.existingDataUserActionId for lngUserActionId )
        var insColumnNames=[];          // USER(), NEW.a, 1, NEW.b, 1, NEW.c, 1, ...
        var updColumnNames=[];          // USER(), NEW.a, (updatedA ? 1 : 0), NEW.b, (updatedB ? 1 : 0), ...
        var delColumnNames=[];          // USER(), OLD.a, 1, OLD.b, 1, OLD.c, 1, ...
        var difColumnNames=[];          // OLD.A <=> NEW.A, OLD.B <=> NEW.B, ...
        var columnNames=[];             // a, b, c, ...
        var columnNamesAndBitFields=[]; // a, updA, b, updB, c, updC, ...
        var declares='';                // DECLARE srcA VARCHAR(x); ...
        var colNames1=[];               // srcA, srcB, srcC, ...
        var colNames2=[];               // a=srcA, b=srcB, c=srcC ...
        var colNames3=[];               // srcA, srcB, srcC, ...  (NULL for ynDeleted columns)
        var whitespace = options.includeUpdateBitFields ? '\n            ' : '';
        if (options.includeCurrentUser) {
            icolNames1.push('`txtTriggerUser`');
            icolNames2.push('USER()');
            insColumnNames.push('USER()')
            updColumnNames.push('USER()')
            delColumnNames.push('USER()')
        }
        $.each(t.getTableColumns(), function(j, c) {
            var c = t.getTableColumns().get(j);
            var rawColumnName = c.getName();
            var columnName = '`' + rawColumnName + '`'; // backtick-quoted column name
            icolNames1.push(columnName);
            icolNames2.push(c.getName()=='lngUserActionId' ? options.existingDataUserActionId : columnName);
            insColumnNames.push('NEW.' + columnName);
            updColumnNames.push(whitespace + 'NEW.' + columnName);
            delColumnNames.push('OLD.' + columnName);
            difColumnNames.push('OLD.' + columnName + ' <=> NEW.' + columnName);
            columnNames.push(columnName);
            columnNamesAndBitFields.push(columnName);
            if (options.includeUpdateBitFields) {
                insColumnNames.push('1');
                updColumnNames.push('(NOT (OLD.' + columnName + ' <=> NEW.' + columnName + '))');
                delColumnNames.push('1');
                columnNamesAndBitFields.push('`upd' + rawColumnName + '`');
            }

            // construct some more arrays for the stored procedures
            var dtl = getDatatypeAndLength(c);
            declares += '  DECLARE `src' + rawColumnName + '` ' + dtl + ';\n';
            colNames1.push('`src' + rawColumnName + '`');
            colNames2.push('`' + rawColumnName + '`=' +
                (rawColumnName=='lngUserActionId' ? 'lngNewUndoUserActionId' : 
                (rawColumnName=='lngRevision' && isRevisioned ? "lngRevision + 1" :
                (rawColumnName=='memRevisionComment' && isRevisioned ? 'CONCAT("Undo to revision ", `srclngRevision`)' :
                '`src' + rawColumnName +'`'))));
       
            colNames3.push(
                (rawColumnName=='lngUserActionId' ? 'lngNewUndoUserActionId' :
                (rawColumnName=='ynDeleted' ? 'NULL' : 
                (rawColumnName=='lngRevision' && isRevisioned ? 'lngRevision + 1' :
                (rawColumnName=='memRevisionComment' && isRevisioned ? 'CONCAT("Undo to revision ", `srclngRevision`)' :
                '`src' + rawColumnName +'`')))));
        });

        
        // -----------------------------------------------------
        // CREATE history table
        // -----------------------------------------------------
    
        if (createTable) {
                // no history table exists; create one
%>
CREATE TABLE `<%= schemaName %>`.`<%= tableName %>History` (
  lngTriggerId INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  txtTriggerAction VARCHAR(1) NOT NULL,
  dtmTriggerTime TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
<%
            if (options.includeCurrentUser) {
%>
  txtTriggerUser VARCHAR(50) NULL,
<%
            }
            // columns
            $.each(t.getTableColumns(), function(j, c) {
                var c = t.getTableColumns().get(j);
                var nullDefault = c.getNullable() ? ' NULL ' : ' NOT NULL ';
                if (c.getDataType() == 'timestamp') {
                    nullDefault = " NULL DEFAULT '0000-00-00 00:00:00' ";
                }
                var dtl = getDatatypeAndLength(c);
%>
  `<%= c.getName() %>` <%= dtl %> <%= nullDefault %>,
<%
                if (options.includeUpdateBitFields) {
%>
  `upd<%= c.getName() %>` BOOLEAN NOT NULL DEFAULT 0,
<%
                }
            }); 
            // indexes
%>
  PRIMARY KEY(lngTriggerId),
  INDEX idx<%= tableName %>History_TriggerTime (dtmTriggerTime)
<%
            if (isUndoEnabled) {
%>
  , INDEX idx<%= tableName %>History_Id (lngId)
  , INDEX idx<%= tableName %>History_UserActionId (lngUserActionId)            
<%
            }
%>
  ) ENGINE=InnoDB CHARACTER SET=utf8mb4;
<%
            // if we've CREATEd the history table, 
            // also need to INSERT all existing records
%>  
INSERT INTO `<%= schemaName %>`.`<%= tableName %>History`
  (txtTriggerAction, <%= icolNames1.join(', ') %>)
    SELECT 'I', <%= icolNames2.join(', ') %>
    FROM `<%= schemaName %>`.`<%= tableName %>`
    ORDER BY lngId;
<%
        }

        // -----------------------------------------------------
        // ALTER history table
        // -----------------------------------------------------
        
        
        if (alterTable) {
            // history table already exists; modify existing
            var afterClause = 'FIRST';
            var addCommaSeparator = false;
%>
ALTER TABLE `<%= schemaName %>`.`<%= tableName %>History`
<%
            // columns
            $.each(t.getTableColumns(), function(j, c) {
                if ( ht.getTableColumnNames().contains(c.getName()) ) {
                    // existing column
                    afterClause = 'AFTER `' + c.getName() + '`';
%>
  -- existing column <%= c.getName() %>
<%
                } else {
                    // new column
                    var nullDefault = c.getNullable() ? ' NULL ' : ' NOT NULL ';
                    if (c.getDataType() == 'timestamp') {
                        nullDefault = " NULL DEFAULT '0000-00-00 00:00:00' ";
                    }
                    var dtl = getDatatypeAndLength(c);
%><%= addCommaSeparator ? ',' : '' %>
  ADD COLUMN `<%= c.getName() %>` <%= dtl %><%= nullDefault %> <%= afterClause %>
<%
                    afterClause = 'AFTER `' + c.getName() + '`';
                    if (options.includeUpdateBitFields) {
%>,
  ADD COLUMN `upd<%= c.getName() %>` BOOLEAN NOT NULL DEFAULT 0 <%= afterClause %>
<%
                        afterClaue = 'AFTER `upd' + c.getName() + '`';
                    }
                    addCommaSeparator = true;
                }
            });
            if (alteredDel) {
                // if columns have been deleted, mention those in the SQL output
                // in a comment only
%>
<%= alteredDel %>
<%
            }        
%>
  ;
<%
        }
        
        
        // -----------------------------------------------------
        // no changes to history table, generate comments only
        // -----------------------------------------------------
        
        if (!(createTable || alterTable)) {
            if (alteredDel) {
                // history table not being created or altered, but
                // if columns have been deleted, mention those in the SQL output
                // in a comment only
        
%>    
<%= alteredDel %>
<%    
            } else {
                // history table not being created or altered
%>
-- table `<%= schemaName %>`.`<%= tableName %>History` not altered
<%
            }
        }


        // -----------------------------------------------------
        // TRIGGERS
        // -----------------------------------------------------

        if (createTrigger) {
%>
DELIMITER $$
CREATE TRIGGER trg<%= tableName %>Insert
  AFTER INSERT ON `<%= tableName %>`
  FOR EACH ROW BEGIN
    INSERT INTO <%= tableName %>History
      (txtTriggerAction, <%= options.includeCurrentUser ? 'txtTriggerUser, ' : '' %> <%= columnNamesAndBitFields.join(', ') %> )
      VALUES ('I', <%= insColumnNames.join(', ') %>);
  END;
$$
CREATE TRIGGER trg<%= tableName %>Update
  AFTER UPDATE ON `<%= tableName %>`
  FOR EACH ROW BEGIN
    IF (NOT(<%= difColumnNames.join(' AND ') %>)) THEN
<%
            if (isUndoEnabled) {
%>
      IF (NEW.ynDeleted IS NULL OR NEW.ynDeleted<>'Y') THEN
<%
            }
%>          
        INSERT INTO <%= tableName %>History
          (txtTriggerAction, <%= options.includeCurrentUser ? 'txtTriggerUser, ' : '' %> <%= columnNamesAndBitFields.join(', ') %> )
          VALUES ('U', <%= updColumnNames.join(', ') %> );
<%
            if (isUndoEnabled) {
%>
      END IF;
<%
            }
%>
    END IF;
  END;
$$            
CREATE TRIGGER trg<%= tableName %>Delete
  AFTER DELETE ON `<%= tableName %>`
  FOR EACH ROW
    INSERT INTO <%= tableName %>History
      (txtTriggerAction, <%= options.includeCurrentUser ? 'txtTriggerUser, ' : '' %> <%= columnNamesAndBitFields.join(', ') %> )
      VALUES ('D', <%= delColumnNames.join(', ') %>);
$$      
<%
        }
        
        // -----------------------------------------------------
        // STORED PROCEDURES for undo-enabled tables
        // -----------------------------------------------------

        if (createStoredProcedure && isUndoEnabled) {
%>
DROP PROCEDURE IF EXISTS prcUndo<%= tableNameSansPrefix %>Update
$$
CREATE PROCEDURE prcUndo<%= tableNameSansPrefix %>Update
  (IN lngNewUndoUserActionId INTEGER,
   IN lngOrigUserActionId INTEGER,
   IN lngOrigReferenceId INTEGER)
COMMENT 'Undo a <%= tableName %> update'
BEGIN
  -- would be nice if there was some kind of tuple data structure in MySQL
  -- so I wouldn't have to declare all these variables
<%= declares %>
  DECLARE varlngDone INTEGER DEFAULT FALSE;

  DECLARE curSource CURSOR FOR
    -- get the previous value for this record. eurgh.
    -- probably need to check that the previous value wasn't reversed as well now.
    SELECT <%= columnNames.join(', ') %>
      FROM <%= tableName %>History
      WHERE lngUserActionId < lngOrigUserActionId AND lngId = lngOrigReferenceId
      AND lngUserActionId NOT IN (
        /* reversed actions */
        SELECT lngId FROM tblUserAction WHERE lngUndoUserActionId IS NOT NULL)
      ORDER BY lngUserActionId DESC, lngTriggerId DESC
      LIMIT 1;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET varlngDone = TRUE;

  OPEN curSource;
  -- not looping since there should only ever be one row
  FETCH curSource INTO <%= colNames1.join(', ') %>;
  -- SELECT "Wonder if I can debug this thing ", varlngDone;
  IF NOT varlngDone THEN
    UPDATE <%= tableName %> SET <%= colNames2.join(', ') %>
    WHERE lngId = lngOrigReferenceId;
    -- SELECT "srclngUserActionId, srctxtName and lngOrigReferenceId are ", srclngUserActionId, srctxtName, lngOrigReferenceId;
  END IF;
  CLOSE curSource;
END
$$
<%
            if (options.grantUsername) {
%>
GRANT EXECUTE ON PROCEDURE prcUndo<%= tableNameSansPrefix %>Update TO '<%= options.grantUsername %>'@'%'
$$
<%
            }
%>

DROP PROCEDURE IF EXISTS prcUndo<%= tableNameSansPrefix %>Delete
$$
CREATE PROCEDURE prcUndo<%= tableNameSansPrefix %>Delete
  (IN lngNewUndoUserActionId INTEGER,
   IN lngOrigUserActionId INTEGER,
   IN lngOrigReferenceId INTEGER)
COMMENT 'Undo a <%= tableName %> delete'
BEGIN
  -- would be nice if there was some kind of tuple data structure in MySQL
  -- so I wouldn't have to declare all these variables
<%= declares %>
  DECLARE varlngDone INTEGER DEFAULT FALSE;

  DECLARE curSource CURSOR FOR
    -- get the previous value for this record.
    -- also check that the previous value wasn't reversed as well
    SELECT <%= columnNames.join(', ') %>
      FROM <%= tableName %>History
      WHERE lngUserActionId = lngOrigUserActionId AND lngId = lngOrigReferenceId AND txtTriggerAction = 'D'
      AND lngUserActionId NOT IN (
        /* reversed actions */
        SELECT lngId FROM tblUserAction WHERE lngUndoUserActionId IS NOT NULL)
      ORDER BY lngUserActionId DESC, lngTriggerId DESC
      LIMIT 1;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET varlngDone = TRUE;

  OPEN curSource;
  -- not looping since there should only ever be one row
  FETCH curSource INTO <%= colNames1.join(', ') %>;
  -- SELECT "Wonder if I can debug this thing ", varlngDone;
  IF NOT varlngDone THEN
    INSERT INTO <%= tableName %> (<%= columnNames.join(', ') %> )
      VALUES (<%= colNames3.join(', ') %>);
    -- SELECT "srctxtName and lngOrigReferenceId are ", srctxtName, lngOrigReferenceId;
  END IF;
  CLOSE curSource;
END
$$
<%
            if (options.grantUsername) {
%>
GRANT EXECUTE ON PROCEDURE prcUndo<%= tableNameSansPrefix %>Delete TO '<%= options.grantUsername %>'@'%'
$$
<%
            }
        }
%>
DELIMITER ;
<%    
    }); // tableName  
%>       
     
