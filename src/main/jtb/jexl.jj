
options {
  JAVA_UNICODE_ESCAPE = true;
  ERROR_REPORTING = false;
  STATIC = false;
}

PARSER_BEGIN(ExpressionParser)
package com.randomnoun.common.jexl.parser;
import java.io.*;

/**
 * Grammar to parse expressions
 * 
 * Based on java1.5.jj at https://javacc.dev.java.net/servlets/ProjectDocumentList?folderID=110
 * which doesn't exist any more, but there's some old content at 
 *   https://web.archive.org/web/20120929013920/http://java.net/projects/javacc/downloads/directory/contrib/grammars
 * and compare against the behemoth that that's turned into at
 *   https://github.com/javaparser/javaparser/blob/master/javaparser-core/src/main/javacc/java.jj
 */
public class ExpressionParser
{
   public ExpressionParser(String fileName)
   {
      this(System.in);
      try { ReInit(new FileInputStream(new File(fileName))); }
      catch(Exception e) { e.printStackTrace(); }
   }

  public static void main(String args[]) {
    ExpressionParser parser;
    if (args.length == 0) {
      System.out.println("Expression Parser:  Reading from standard input . . .");
      parser = new ExpressionParser(System.in);
    } else if (args.length == 1) {
      System.out.println("Expression Parser:  Reading from file " + args[0] + " . . .");
      try {
        parser = new ExpressionParser(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Expression Parser:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("Expression Parser1:  Usage is one of:");
      System.out.println("         java JavaParser < inputfile");
      System.out.println("OR");
      System.out.println("         java JavaParser inputfile");
      return;
    }
    try {
      parser.Expression();
      System.out.println("Expression Parser:  Expression parsed successfully.");
    } catch (ParseException e) {
      System.out.println(e.getMessage());
      System.out.println("Expression Parser:  Encountered errors during parse.");
    }
  }
}

PARSER_END(ExpressionParser)

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* 
      | "." (["0"-"9"])+ 
  >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < TRUE: "true" >
| < NULL: "null" >
| < FALSE: "false" >
}



/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "0"-"9"   /* sorry, only latin numbers here */
      ]
  >
}

void TopLevelExpression():
{}
{
  Expression() <EOF>
}


void Expression():
{}
{
  ConditionalAndExpression() ( "||" ConditionalAndExpression() )*
}

void ConditionalAndExpression():
{}
{
  EqualityExpression() ( "&&" EqualityExpression() )*
}


void EqualityExpression():
{}
{
  RelationalExpression() ( ( "==" | "!=" ) RelationalExpression() )*
}


void RelationalExpression():
{}
{
  AdditiveExpression() ( ( "<" | ">" | "<=" | ">=" ) AdditiveExpression() )*
}

void AdditiveExpression():
{}
{
  MultiplicativeExpression() ( ( "+" | "-" ) MultiplicativeExpression() )*
}


void MultiplicativeExpression():
{}
{
  UnaryExpression() ( ( "*" | "/" | "%" ) UnaryExpression() )*
}

void UnaryExpression():
{}
{
  ( "~" | "!" | "-" ) UnaryExpression()
| 
  PrimaryExpression()
}

void PrimaryExpression():
{}
{
  LOOKAHEAD(2) FunctionCall()
|  
  LOOKAHEAD(2) Name()
|
  Literal()
|
  "(" Expression() ")"
}

void Name():
{}
{
  /** should match this identifier against expression context-supplied names */
  <IDENTIFIER> ( "." <IDENTIFIER> )*
}

void FunctionCall():
{}
{
  /** should match this identifier against (fixed) function symbol table */
  <IDENTIFIER> Arguments()
}

void Arguments():
{}
{
  "(" [ ArgumentList() ] ")"
}

void ArgumentList():
{}
{
  Expression() ( "," Expression() )*
}

void Literal():
{}
{
  <INTEGER_LITERAL>
|
  <FLOATING_POINT_LITERAL>
|
  <CHARACTER_LITERAL>
|
  <STRING_LITERAL>
|
  BooleanLiteral()
|
  NullLiteral()

  /** date literal? */
}

void BooleanLiteral():
{}
{
  "true"
|
  "false"
}

void NullLiteral():
{}
{
  "null"
}



